
n1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000001f2  00000266  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b2a  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000072d  00000000  00000000  00000e9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000533  00000000  00000000  000015cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  00001b00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a0  00000000  00000000  00001bec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003c0  00000000  00000000  00001f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  0000234c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ef       	ldi	r30, 0xF2	; 242
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  7a:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <button_init>:

#include "BUTTON_CORE.h"

void button_init (void)
{
	clr_bit(ddrd , 2);
  82:	8a 98       	cbi	0x11, 2	; 17
  84:	08 95       	ret

00000086 <button_get_value>:
uint8  button_get_value(void)
{
	uint8 temp=0;
	uint8 button=0;
	
	button = get_bit(pind , 2);
  86:	80 b3       	in	r24, 0x10	; 16
		temp=get_bit(pind,2);
	}
	_delay_ms(10);
*/	
	return button ;
}
  88:	82 fb       	bst	r24, 2
  8a:	88 27       	eor	r24, r24
  8c:	80 f9       	bld	r24, 0
  8e:	08 95       	ret

00000090 <led_intel>:
#include "MCU.h"
#include "LED_CORE.H"

void led_intel(void)
{
	set_bit(ddrc,2);
  90:	a2 9a       	sbi	0x14, 2	; 20
  92:	08 95       	ret

00000094 <display>:
#include "BUTTON_CORE.h"

uint8 seven_segmant[10]={0x7e,0x0c,0xb6,0x9e,0xcc,0xda,0xfa,0x0e,0xfe,0xce};
	
	void display(int i,int c)
	{uint8 x=0; 
  94:	2a e0       	ldi	r18, 0x0A	; 10
			while(x<10)
			{	set_bit(portc,7);
				clr_bit(portc,6);
				porta= seven_segmant[i];
  96:	dc 01       	movw	r26, r24
  98:	a0 5a       	subi	r26, 0xA0	; 160
  9a:	bf 4f       	sbci	r27, 0xFF	; 255
				_delay_ms(10);
				clr_bit(portc,7);
				set_bit(portc,6);
				porta= seven_segmant[c];
  9c:	fb 01       	movw	r30, r22
  9e:	e0 5a       	subi	r30, 0xA0	; 160
  a0:	ff 4f       	sbci	r31, 0xFF	; 255
uint8 seven_segmant[10]={0x7e,0x0c,0xb6,0x9e,0xcc,0xda,0xfa,0x0e,0xfe,0xce};
	
	void display(int i,int c)
	{uint8 x=0; 
			while(x<10)
			{	set_bit(portc,7);
  a2:	af 9a       	sbi	0x15, 7	; 21
				clr_bit(portc,6);
  a4:	ae 98       	cbi	0x15, 6	; 21
				porta= seven_segmant[i];
  a6:	9c 91       	ld	r25, X
  a8:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	8f e3       	ldi	r24, 0x3F	; 63
  ac:	9c e9       	ldi	r25, 0x9C	; 156
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <display+0x1a>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <display+0x20>
  b4:	00 00       	nop
				_delay_ms(10);
				clr_bit(portc,7);
  b6:	af 98       	cbi	0x15, 7	; 21
				set_bit(portc,6);
  b8:	ae 9a       	sbi	0x15, 6	; 21
				porta= seven_segmant[c];
  ba:	90 81       	ld	r25, Z
  bc:	9b bb       	out	0x1b, r25	; 27
  be:	8f e3       	ldi	r24, 0x3F	; 63
  c0:	9c e9       	ldi	r25, 0x9C	; 156
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <display+0x2e>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <display+0x34>
  c8:	00 00       	nop
  ca:	21 50       	subi	r18, 0x01	; 1

uint8 seven_segmant[10]={0x7e,0x0c,0xb6,0x9e,0xcc,0xda,0xfa,0x0e,0xfe,0xce};
	
	void display(int i,int c)
	{uint8 x=0; 
			while(x<10)
  cc:	51 f7       	brne	.-44     	; 0xa2 <display+0xe>
			
			}
		
			
			return 0 ;
	} 
  ce:	08 95       	ret

000000d0 <main>:
clr_bit(portc,6);	
set_bit(portc,7);	
porta= seven_segmant[y/10];	
_delay_ms(10);	
}*/
restart();	
  d0:	0e 94 8c 00 	call	0x118	; 0x118 <restart>
	ddra=0xff;
  d4:	8f ef       	ldi	r24, 0xFF	; 255
  d6:	8a bb       	out	0x1a, r24	; 26
	ddrc=0x10;
  d8:	80 e1       	ldi	r24, 0x10	; 16
  da:	84 bb       	out	0x14, r24	; 20
	set_bit(ddrc,5);
  dc:	a5 9a       	sbi	0x14, 5	; 20
	set_bit(ddrc,6);
  de:	a6 9a       	sbi	0x14, 6	; 20
	set_bit(ddrc,7);
  e0:	a7 9a       	sbi	0x14, 7	; 20
	
	

		for(int i=0;i<10;)
  e2:	00 e0       	ldi	r16, 0x00	; 0
  e4:	10 e0       	ldi	r17, 0x00	; 0
  e6:	0f c0       	rjmp	.+30     	; 0x106 <main+0x36>
		{ 
			for(int c=0;c<10;c++)
			{
				display(i,c);
  e8:	be 01       	movw	r22, r28
  ea:	c8 01       	movw	r24, r16
  ec:	0e 94 4a 00 	call	0x94	; 0x94 <display>
			restart();	
  f0:	0e 94 8c 00 	call	0x118	; 0x118 <restart>
	
	

		for(int i=0;i<10;)
		{ 
			for(int c=0;c<10;c++)
  f4:	21 96       	adiw	r28, 0x01	; 1
  f6:	ca 30       	cpi	r28, 0x0A	; 10
  f8:	d1 05       	cpc	r29, r1
  fa:	b1 f7       	brne	.-20     	; 0xe8 <main+0x18>
			{
				display(i,c);
			restart();	
			}
		i++;
  fc:	0f 5f       	subi	r16, 0xFF	; 255
  fe:	1f 4f       	sbci	r17, 0xFF	; 255
	set_bit(ddrc,6);
	set_bit(ddrc,7);
	
	

		for(int i=0;i<10;)
 100:	0a 30       	cpi	r16, 0x0A	; 10
 102:	11 05       	cpc	r17, r1
 104:	19 f0       	breq	.+6      	; 0x10c <main+0x3c>
		return 0;
		}
		
	}
int main(void)
{ /*uint8 y=96;
 106:	c0 e0       	ldi	r28, 0x00	; 0
 108:	d0 e0       	ldi	r29, 0x00	; 0
 10a:	ee cf       	rjmp	.-36     	; 0xe8 <main+0x18>
			restart();	
			}
		i++;

		}
		set_bit(portc,7);
 10c:	af 9a       	sbi	0x15, 7	; 21
buz();
 10e:	0e 94 99 00 	call	0x132	; 0x132 <buz>
while(1)
{
	restart();
 112:	0e 94 8c 00 	call	0x118	; 0x118 <restart>
 116:	fd cf       	rjmp	.-6      	; 0x112 <main+0x42>

00000118 <restart>:
		}
		return 0 ;
	}
	void restart(void)
	{uint8 button=0;
		led_intel();
 118:	0e 94 48 00 	call	0x90	; 0x90 <led_intel>
		button_init();
 11c:	0e 94 41 00 	call	0x82	; 0x82 <button_init>

		while(1)
		{
			
			button =  button_get_value();
 120:	0e 94 43 00 	call	0x86	; 0x86 <button_get_value>
			
			if (button == 0)
 124:	81 11       	cpse	r24, r1
 126:	04 c0       	rjmp	.+8      	; 0x130 <restart+0x18>
			{
				clr_bit(portc,7);
 128:	af 98       	cbi	0x15, 7	; 21
				clr_bit(portc,6);
 12a:	ae 98       	cbi	0x15, 6	; 21
				main();	
 12c:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
 130:	08 95       	ret

00000132 <buz>:
		
			
			return 0 ;
	} 
	void buz(void)
	{int i;
 132:	1f 93       	push	r17
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
		while(i<5)
 138:	c0 e0       	ldi	r28, 0x00	; 0
 13a:	d0 e0       	ldi	r29, 0x00	; 0
		{
			ddrc=0x02;
 13c:	12 e0       	ldi	r17, 0x02	; 2
 13e:	14 bb       	out	0x14, r17	; 20
			
			set_bit(portc,5);
 140:	ad 9a       	sbi	0x15, 5	; 21
			set_bit(portc,0);
 142:	a8 9a       	sbi	0x15, 0	; 21
 144:	2f ef       	ldi	r18, 0xFF	; 255
 146:	8e e9       	ldi	r24, 0x9E	; 158
 148:	94 e2       	ldi	r25, 0x24	; 36
 14a:	21 50       	subi	r18, 0x01	; 1
 14c:	80 40       	sbci	r24, 0x00	; 0
 14e:	90 40       	sbci	r25, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <buz+0x18>
 152:	00 c0       	rjmp	.+0      	; 0x154 <buz+0x22>
 154:	00 00       	nop
			_delay_ms(750);
			clr_bit(portc,5);
 156:	ad 98       	cbi	0x15, 5	; 21
			clr_bit(portc,0);
 158:	a8 98       	cbi	0x15, 0	; 21
				restart();
 15a:	0e 94 8c 00 	call	0x118	; 0x118 <restart>
 15e:	2f ef       	ldi	r18, 0xFF	; 255
 160:	81 ee       	ldi	r24, 0xE1	; 225
 162:	94 e0       	ldi	r25, 0x04	; 4
 164:	21 50       	subi	r18, 0x01	; 1
 166:	80 40       	sbci	r24, 0x00	; 0
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <buz+0x32>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <buz+0x3c>
 16e:	00 00       	nop
			_delay_ms(100);
			restart();
 170:	0e 94 8c 00 	call	0x118	; 0x118 <restart>
			set_bit(portc,5);
 174:	ad 9a       	sbi	0x15, 5	; 21
			set_bit(portc,1);
 176:	a9 9a       	sbi	0x15, 1	; 21
 178:	2f ef       	ldi	r18, 0xFF	; 255
 17a:	8e e9       	ldi	r24, 0x9E	; 158
 17c:	94 e2       	ldi	r25, 0x24	; 36
 17e:	21 50       	subi	r18, 0x01	; 1
 180:	80 40       	sbci	r24, 0x00	; 0
 182:	90 40       	sbci	r25, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <buz+0x4c>
 186:	00 c0       	rjmp	.+0      	; 0x188 <buz+0x56>
 188:	00 00       	nop
			_delay_ms(750);
			clr_bit(portc,5);
 18a:	ad 98       	cbi	0x15, 5	; 21
			clr_bit(portc,1);
 18c:	a9 98       	cbi	0x15, 1	; 21
				restart();
 18e:	0e 94 8c 00 	call	0x118	; 0x118 <restart>
 192:	2f ef       	ldi	r18, 0xFF	; 255
 194:	84 e3       	ldi	r24, 0x34	; 52
 196:	9c e0       	ldi	r25, 0x0C	; 12
 198:	21 50       	subi	r18, 0x01	; 1
 19a:	80 40       	sbci	r24, 0x00	; 0
 19c:	90 40       	sbci	r25, 0x00	; 0
 19e:	e1 f7       	brne	.-8      	; 0x198 <buz+0x66>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <buz+0x70>
 1a2:	00 00       	nop
			_delay_ms(250);
		restart();
 1a4:	0e 94 8c 00 	call	0x118	; 0x118 <restart>
			set_bit(portc,5);
 1a8:	ad 9a       	sbi	0x15, 5	; 21
			set_bit(portc,2);
 1aa:	aa 9a       	sbi	0x15, 2	; 21
 1ac:	2f ef       	ldi	r18, 0xFF	; 255
 1ae:	81 ee       	ldi	r24, 0xE1	; 225
 1b0:	94 e0       	ldi	r25, 0x04	; 4
 1b2:	21 50       	subi	r18, 0x01	; 1
 1b4:	80 40       	sbci	r24, 0x00	; 0
 1b6:	90 40       	sbci	r25, 0x00	; 0
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <buz+0x80>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <buz+0x8a>
 1bc:	00 00       	nop
			_delay_ms(100);
			clr_bit(portc,5);
 1be:	ad 98       	cbi	0x15, 5	; 21
			clr_bit(portc,2);
 1c0:	aa 98       	cbi	0x15, 2	; 21
			restart();
 1c2:	0e 94 8c 00 	call	0x118	; 0x118 <restart>
 1c6:	2f ef       	ldi	r18, 0xFF	; 255
 1c8:	84 e3       	ldi	r24, 0x34	; 52
 1ca:	9c e0       	ldi	r25, 0x0C	; 12
 1cc:	21 50       	subi	r18, 0x01	; 1
 1ce:	80 40       	sbci	r24, 0x00	; 0
 1d0:	90 40       	sbci	r25, 0x00	; 0
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <buz+0x9a>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <buz+0xa4>
 1d6:	00 00       	nop
			_delay_ms(250);
			restart();
 1d8:	0e 94 8c 00 	call	0x118	; 0x118 <restart>
			i++;
 1dc:	21 96       	adiw	r28, 0x01	; 1
			
			return 0 ;
	} 
	void buz(void)
	{int i;
		while(i<5)
 1de:	c5 30       	cpi	r28, 0x05	; 5
 1e0:	d1 05       	cpc	r29, r1
 1e2:	09 f0       	breq	.+2      	; 0x1e6 <buz+0xb4>
 1e4:	ac cf       	rjmp	.-168    	; 0x13e <buz+0xc>
			
			
			
		}
		return 0 ;
	}
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	1f 91       	pop	r17
 1ec:	08 95       	ret

000001ee <_exit>:
 1ee:	f8 94       	cli

000001f0 <__stop_program>:
 1f0:	ff cf       	rjmp	.-2      	; 0x1f0 <__stop_program>
